{"./":{"url":"./","title":"TortoiseSVN","keywords":"","body":"TortoiseSVN TortoiseSVN 是 Windows 下的版本控制系统客户端工具。 "},"docs/安装 TortoiseSVN.html":{"url":"docs/安装 TortoiseSVN.html","title":"安装 TortoiseSVN","keywords":"","body":"安装 TortoiseSVN 在官方网站下载 安装包 ，双击安装文件并按照提示操作，安装结束后重启电脑。 TortoiseSVN 还提供了语言补丁，它可以将用户界面翻译成多种文字。安装完成后，可以通过设置修改成已经安装的语言。 "},"docs/创建版本库.html":{"url":"docs/创建版本库.html","title":"创建版本库","keywords":"","body":"创建版本库 对于一个实际的项目，需要在一个安全的地方创建版本库并设置版本控制服务器来控制它。首先在你的电脑上建立一个新的目录，这个目录可以建立在任何位置，然后执行下面图片中的操作。这样做后，一个可以供你所用的版本库就在这个文件夹中创建好了。 接下来点击创建目录结构来创建标准目录结构。 "},"docs/用户权限.html":{"url":"docs/用户权限.html","title":"用户权限","keywords":"","body":"用户权限 打开创建好的版本库目录，修改 conf 目录下的 svnserve.conf 文件。 [general] anon-access = none auth-access = write password-db = passwd authz-db = authz 然后在同目录下的 passwd 文件中添加用户名和密码。 [users] kuriv = 123456 最后在同目录下的 authz 文件中配置用户权限。 [/] kuriv = rw "},"docs/启动服务.html":{"url":"docs/启动服务.html","title":"启动服务","keywords":"","body":"启动服务 在终端提示符下，只需运行以下命令即可启动服务，注意不要关闭窗口，否则服务会停止。 svnserve -d -r \"版本库目录\" 也可以执行下面的命令，注册系统服务。 sc create \"服务名\" binPath= \"\\\"当前环境中 svnserve.exe 的执行路径\\\" --service --root \\\"版本库目录\\\"\" displayName= \"服务名\" depend= TCPIP start= auto "},"docs/检出工作副本.html":{"url":"docs/检出工作副本.html","title":"检出工作副本","keywords":"","body":"检出工作副本 当你创建好版本库之后，还需要创建一个工作副本，此时需要从版本库进行检出操作。 你可以选择要检出的深度，它允许你指定子目录递归的深度。 然后输入用户名和密码。 "},"docs/提交修改到版本库.html":{"url":"docs/提交修改到版本库.html","title":"提交修改到版本库","keywords":"","body":"提交修改到版本库 将你对工作副本的修改发送给版本库，称为提交修改。但在你提交之前要确保你的工作副本是最新的。你可以执行下面图片中的操作来添加 README.md 文件到版本库。 提交对话框将显示每个被改动过的文件，包括新增的，删除的和未受控的文件。如果你不想改动被提交，只要将该文件的复选框的勾去掉。如果你要加入未受控的文件，只要勾选该文件把它加入提交列表就可以了。 "},"docs/更新工作副本.html":{"url":"docs/更新工作副本.html","title":"更新工作副本","keywords":"","body":"更新工作副本 你需要定期地确保将别人所做的修改整合到你本地的工作副本中。从服务器获取更改到本地副本的过程就叫做更新。更新的对象可以是一个文件，选中的多个文件或者对整个目录结构进行递归。要进行更新，执行下面图片中的操作。其他人所做的更改将会合并到你的文件中，并保留同一个文件中你所做的更改。版本库不会受更新影响。 "},"docs/解决冲突.html":{"url":"docs/解决冲突.html","title":"解决冲突","keywords":"","body":"解决冲突 当两个或更多开发人员更改了文件的相同几行时，会发生文件冲突。由于 TortoiseSVN 对你的项目一无所知，因此它会将冲突解决给开发人员。 README.md.mine 是你的文件，在你更新你的工作副本之前存在于你的的工作副本中，也就是说，没有冲突标志，这个文件除了你的最新修改外没有别的东西。 README.md.r4 是在你更新你的工作副本之前的基础版本文件，它是在你做最后修改之前所检出的文件。 README.md.r5 这个文件是当你更新你的工作副本时，客户端从服务器接收到的，这个文件对应于版本库中的最新版本。 你可以使用任何文本编辑器手动解决冲突。你应该确定代码应该是什么样子，进行必要的更改并保存文件。然后，执行下面图片中的操作，并提交修改到版本库。需要注意的是下面图片中的操作并不是真正的解决了冲突，它只是删除了文件 README.md.mine 和 README.md.r* ，并允许你提交修改。 "},"docs/版本日志.html":{"url":"docs/版本日志.html","title":"版本日志","keywords":"","body":"版本日志 对于每次进行修改和提交，你应该有针对性地留下日志信息。这样，你就可以在以后方便地看到你都做了什么以及为什么这么做。当然这么做还是你拥有了开发过程的详细日志。 "},"docs/查看差异.html":{"url":"docs/查看差异.html","title":"查看差异","keywords":"","body":"查看差异 在项目开发中，有一个很常用的要求就是查看差异。如果你要查看当前文件版本与上一个版本之间的差异，可以执行下面图片中的操作。 "},"docs/忽略文件.html":{"url":"docs/忽略文件.html","title":"忽略文件","keywords":"","body":"忽略文件 在多数项目中你总会有文件和目录不需要进行版本控制。这可能包括一些由编译器生成的文件，或者是一个用于存放可执行程序的输出文件夹。只要你提交修改，就会在提交对话框的文件列表中显示出未版本控制文件。当然你可以关闭这个显示，不过你可能会忘记添加新的源文件。最好的避免类似问题的方法是添加文件到该项目的忽略列表。这样他们就永远不会出现在提交对话框中，而真正的未被版本控制的文件则仍然列出。 "},"docs/撤销更改.html":{"url":"docs/撤销更改.html","title":"撤销更改","keywords":"","body":"撤销更改 如果你想要撤消一个文件自上次更新后的所有的变更，你只需要执行下面图片中的操作。 "},"docs/创建分支.html":{"url":"docs/创建分支.html","title":"创建分支","keywords":"","body":"创建分支 版本控制系统的一个特性是能够把各种修改分离出来放在一个单独的开发线上，这条线被称为分支。分支经常被用来试验新的特性，而不会干扰正在修改错误的主开发线。 新分支的默认路径将是工作副本所基于的源路径，你需要将该路径修改为分支的新路径。 "},"docs/检出分支.html":{"url":"docs/检出分支.html","title":"检出分支","keywords":"","body":"检出分支 如果你想要将你当前的工作副本切换到在版本库中新建立的分支上，你只需要执行下面图片中的操作。 在对话框中选择你刚才建立的分支的目录，你的工作副本就切换到了指定的分支。 "},"docs/合并分支.html":{"url":"docs/合并分支.html","title":"合并分支","keywords":"","body":"合并分支 当新的特性足够稳定之后，开发分支就可以合并回主分支里。 输入分支或文件夹的完整路径，它包含了你想应用到工作副本的修改。你也可以手动浏览版本库，找到想要合并的分支。 "},"docs/自动部署.html":{"url":"docs/自动部署.html","title":"自动部署","keywords":"","body":"自动部署 打开创建好的版本库目录，在 hooks 目录下创建一个名为 post-commit.bat 的批处理文件，添加下面的内容。 @echo off \"当前环境中 svn.exe 的执行路径\" update \"需要自动部署的目录\" --username 用户名 --password 密码 接下来在需要自动部署的目录中检出工作副本，当本地提交修改到版本库时，版本控制服务器将自动更新指定的需要自动部署的目录中的文件。 "}}